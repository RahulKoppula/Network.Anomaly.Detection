# Preprocessing
-- Identifying Null values and saving the processed data into a new table.
SELECT
  COALESCE(PACKET_SIZE, 0) AS PACKET_SIZE,
  COALESCE(INTER_ARRIVAL_TIME, 0) AS INTER_ARRIVAL_TIME,
  COALESCE(SRC_PORT, 0) AS SRC_PORT,
  COALESCE(DST_PORT, 0) AS DST_PORT,
  COALESCE(PACKET_COUNT_5S, 0) AS PACKET_COUNT_5S,
  COALESCE(MEAN_PACKET_SIZE, 0) AS MEAN_PACKET_SIZE,
  COALESCE(SPECTRAL_ENTROPY, 0) AS SPECTRAL_ENTROPY,
  COALESCE(FREQUENCY_BAND_ENERGY, '') AS FREQUENCY_BAND_ENERGY,  
  COALESCE(LABEL, 0) AS LABEL,
  COALESCE(PROTOCOL_TYPE_TCP, FALSE) AS PROTOCOL_TYPE_TCP,
  COALESCE(PROTOCOL_TYPE_UDP, FALSE) AS PROTOCOL_TYPE_UDP,
  COALESCE("src_ip_192.168.1.2", FALSE) AS "src_ip_192.168.1.2",
  COALESCE("src_ip_192.168.1.3", FALSE) AS "src_ip_192.168.1.3",
  COALESCE("dst_ip_192.168.1.5", FALSE) AS "dst_ip_192.168.1.5",
  COALESCE("dst_ip_192.168.1.6", FALSE) AS "dst_ip_192.168.1.6",
  COALESCE(TCP_FLAGS_FIN, FALSE) AS TCP_FLAGS_FIN,
  COALESCE(TCP_FLAGS_SYN, FALSE) AS TCP_FLAGS_SYN,
  COALESCE("tcp_flags_syn-ack", FALSE) AS "tcp_flags_syn-ack"
FROM
  "Network Traffic Anomaly Detection Dataset".DATA.RAW_TABLE;
CREATE OR REPLACE TABLE "Network Traffic Anomaly Detection Dataset".DATA.PROCESSED_TABLE AS
SELECT
  PACKET_SIZE,
  INTER_ARRIVAL_TIME,
  SRC_PORT,
  DST_PORT,
  PACKET_COUNT_5S,
  MEAN_PACKET_SIZE,
  SPECTRAL_ENTROPY,
  FREQUENCY_BAND_ENERGY,
  LABEL,
  PROTOCOL_TYPE_TCP,
  PROTOCOL_TYPE_UDP,
  "src_ip_192.168.1.2",
  "src_ip_192.168.1.3",
  "dst_ip_192.168.1.5",
  "dst_ip_192.168.1.6",
  TCP_FLAGS_FIN,
  TCP_FLAGS_SYN,
  "tcp_flags_syn-ack"
FROM "Network Traffic Anomaly Detection Dataset".DATA.RAW_TABLE
WHERE
  PACKET_SIZE IS NOT NULL
  AND INTER_ARRIVAL_TIME IS NOT NULL;

-- Verifying Preprocessed Table
SELECT COUNT(*) FROM "Network Traffic Anomaly Detection Dataset".DATA.PROCESSED_TABLE;
SELECT * FROM "Network Traffic Anomaly Detection Dataset".DATA.PROCESSED_TABLE LIMIT 100;
